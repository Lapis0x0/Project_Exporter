name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PyQt5

      - name: Build executable
        run: |
          if [[ "${{ matrix.os }}" == 'windows-latest' ]]; then
            pyinstaller --onefile --add-data "HarmonyOS_Sans_SC_Regular.ttf;." main.py
          elif [[ "${{ matrix.os }}" == 'macos-latest' ]]; then
            pyinstaller --onefile --add-data "HarmonyOS_Sans_SC_Regular.ttf:." main.py
            hdiutil create -volname "ProjectExportTool" -srcfolder dist -ov -format UDZO dist/ProjectExportTool.dmg
          else
            pyinstaller --onefile --add-data "HarmonyOS_Sans_SC_Regular.ttf:." main.py
          fi
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-build
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-build
          path: ./dist/windows

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-build
          path: ./dist/macos

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/windows/main.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset for macOS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/macos/ProjectExportTool.dmg
          asset_name: ProjectExportTool-macos.dmg
          asset_content_type: application/octet-stream
